{"cells":[{"cell_type":"code","source":"# %% [code]\n#importing libraries\nimport sys\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\n# %% [code]\n#loading the data \ndef loading_data(messages_path, categories_path):\n\n    try:\n        messages = pd.read_csv(messages_path)\n        categories = pd.read_csv(categories_path, sep = ',')\n        data = pd.merge(messages, categories, on = 'id')\n        return data\n    except:\n        print(\"file not found!\")\n\n# %% [code]\n#cleaning the data\ndef cleaning_data(data):\n\n    data_categories = data['categories'].str.split(';',expand = True)\n    data_row = data_categories.loc[0]\n    category_cols = data_row.apply(lambda x: x[:-2]).values.tolist()\n    data_categories.columns = category_cols\n\n    #changing the cloumn shape\n    for column in data_categories:\n        # setting each value to the last character of the string\n        data_categories[column] = data_categories[column].astype(str).str[-1]\n        # converting the column from string to numeric\n        data_categories[column] = data_categories[column].astype(int)\n    \n    data.drop('categories',axis = 1, inplace = True)\n    data = pd.concat([data, data_categories], axis = 1)\n    if data.duplicated().sum() != 0:\n        data.drop_duplicates(inplace = True)\n        \n    return data\n\n# %% [code]\n#saving data to SQLite DB\ndef store_data(data, database_name):\n    engine = create_engine('sqlite:///'+database_name)\n    data.to_sql('Processed_Message', engine, index=False)\n\n# %% [code]\ndef main():\n    if len(sys.argv) == 4:\n\n        messages_path, categories_path, database_path = sys.argv[1:]\n\n        print('Loading data...\\n    MESSAGES: {}\\n    CATEGORIES: {}'.format(messages_path, categories_path))\n        data = loading_data(messages_path, categories_path)\n\n        print('Cleaning data...')\n        data = cleaning_data(data)\n        \n        print('Saving data...\\n    DATABASE: {}'.format(database_path))\n        store_data(data, database_path)\n        \n        print('Cleaned the data and saved to the database!')\n    \n    else:\n        print('Please provide the filepaths of the messages and categories '\\\n              'datasets as the first and second argument respectively, as '\\\n              'well as the filepath of the database to save the cleaned data '\\\n              'to as the third argument. \\n\\nExample: python process_data.py '\\\n              'data/disaster_messages.csv data/disaster_categories.csv '\\\n              'data/DisasterResponse.db')\n\n\nif __name__ == '__main__':\n    main()","metadata":{"collapsed":false,"_kg_hide-input":false},"execution_count":0,"outputs":[]}],"metadata":{"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"nbformat":4,"nbformat_minor":4}